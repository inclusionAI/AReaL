name: Test AReaLite

on:
  pull_request:
    branches: [ lite ]
    paths:
      - .github/workflows/test-arealite.yml
      - arealite/**
      - ci/**
  workflow_dispatch:
  # 新增：监听PR评论事件
  issue_comment:
    types: [created]

jobs:
  # 新增：检查是否应该运行测试的job
  check-trigger:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request') ||
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '/test') &&
       (github.event.comment.author_association == 'OWNER' || 
        github.event.comment.author_association == 'MEMBER' || 
        github.event.comment.author_association == 'COLLABORATOR'))
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      pr_number: ${{ steps.check.outputs.pr_number }}
      pr_sha: ${{ steps.check.outputs.pr_sha }}
    steps:
      - name: Check if should run
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "pr_sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "pr_number=" >> $GITHUB_OUTPUT
            echo "pr_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            # 获取PR的HEAD SHA
            pr_sha=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}" | \
              jq -r '.head.sha')
            echo "pr_sha=$pr_sha" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  add-reaction:
    runs-on: ubuntu-latest
    needs: check-trigger
    if: github.event_name == 'issue_comment' && needs.check-trigger.outputs.should_run == 'true'
    steps:
      - name: Add reaction to comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: '+1'
            })

  test-arealite:
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should_run == 'true'
    concurrency:
      group: test-arealite-${{ needs.check-trigger.outputs.pr_number || github.run_id }}
    steps:
      - name: Get PR details
        id: pr-details
        if: github.event_name == 'issue_comment'
        run: |
          pr_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ needs.check-trigger.outputs.pr_number }}")
          echo "repo_url=$(echo "$pr_info" | jq -r '.head.repo.clone_url')" >> $GITHUB_OUTPUT
          echo "branch=$(echo "$pr_info" | jq -r '.head.ref')" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        if: github.event_name != 'issue_comment'
        
      - name: Checkout PR branch
        if: github.event_name == 'issue_comment'
        run: |
          git clone ${{ steps.pr-details.outputs.repo_url }} .
          git checkout ${{ steps.pr-details.outputs.branch }}

      - uses: appleboy/ssh-action@v1
        env:
          GIT_REPO_URL: ${{ github.event_name == 'issue_comment' && steps.pr-details.outputs.repo_url || format('https://github.com/{0}', github.repository) }}
          GIT_COMMIT_SHA: ${{ needs.check-trigger.outputs.pr_sha }}
          CI_NODE_SUDO_PW: ${{ secrets.CI_NODE_SUDO_PW }}
        with:
          host: ${{ secrets.CI_NODE_ADDR }}
          username: ${{ secrets.CI_NODE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          envs: GIT_REPO_URL,GIT_COMMIT_SHA,CI_NODE_SUDO_PW
          script_path: ci/clone_repo.sh

      - uses: appleboy/ssh-action@v1
        env:
          GIT_COMMIT_SHA: ${{ needs.check-trigger.outputs.pr_sha }}
        with:
          host: ${{ secrets.CI_NODE_ADDR }}
          username: ${{ secrets.CI_NODE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          command_timeout: 2h
          envs: GIT_COMMIT_SHA
          script_path: ci/build_env_image.sh

      - uses: appleboy/ssh-action@v1
        env:
          GIT_COMMIT_SHA: ${{ needs.check-trigger.outputs.pr_sha }}
        with:
          host: ${{ secrets.CI_NODE_ADDR }}
          username: ${{ secrets.CI_NODE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          command_timeout: 1h
          envs: GIT_COMMIT_SHA
          script_path: ci/test_arealite.sh

  update-pr-status:
    runs-on: ubuntu-latest
    needs: [check-trigger, test-arealite]
    if: always() && needs.check-trigger.outputs.should_run == 'true' && github.event_name == 'issue_comment'
    steps:
      - name: Update PR with test results
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.check-trigger.outputs.pr_number }}
            });
            
            const testResult = '${{ needs.test-arealite.result }}';
            const emoji = testResult === 'success' ? '✅' : '❌';
            const status = testResult === 'success' ? 'passed' : 'failed';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.check-trigger.outputs.pr_number }},
              body: `${emoji} Tests **${status}** for commit ${pr.head.sha.substring(0, 7)}\n\n[View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            });